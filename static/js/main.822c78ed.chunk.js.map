{"version":3,"sources":["components/resultList/ResultList.js","components/SearchSection/SearchSection.js","pages/DashBoard.js","utils/FormatParam.js","App.js","reportWebVitals.js","index.js"],"names":["ResultList","incidents","users","map","incident","name","find","user_id","first_name","incident_id","SearchSection","searchParam","setSearchParam","action","type","onChange","e","incident_name","target","value","user","last_name","DashBoard","className","isFalsy","cleanEmptyParam","param","copiedParam","Object","keys","forEach","key","paramAttributeNameChange","currentName","newName","valueOfnewName","console","log","api","App","callback","useState","setUsers","setIncidents","useEffect","fetch","then","response","a","ok","json","pipe","qs","position","setTimeout","noEmptyParam","changeIncidentNameToName","deleteEmptyParam","formatParam","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.822c78ed.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./ResultList.scss\";\r\n\r\nconst ResultList = ({ incidents, users }) => {\r\n  return (\r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          <th>Incident</th>\r\n          <th>User</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {incidents.map((incident) => {\r\n          //     let fullName;\r\n          //   const rightUser = users.find(\r\n          //     (user) => user.user_id === incident.user_id\r\n          //   );\r\n          //   if (rightUser) {\r\n          //     fullName = rightUser.first_name + \" \" + rightUser.last_name;\r\n          //   } else {\r\n          //     fullName = \"This user doesn't exist\" // 这个防止incident中的user id 在user里面找不到\r\n          //   }\r\n\r\n          return (\r\n            <tr key={incident.incident_id}>\r\n              <td>{incident.name}</td>\r\n              <td>\r\n                {users.find(({ user_id }) => user_id === incident.user_id)\r\n                  ?.first_name || \"this user is not here\"}\r\n              </td>\r\n            </tr>\r\n          );\r\n        })}\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default ResultList;\r\n","import React from \"react\";\r\n\r\nconst SearchSection = ({ users, searchParam, setSearchParam }) => {\r\n  const selectionChangeHandler = (e) => {\r\n    setSearchParam({ ...searchParam, user_id: e.target.value });\r\n  };\r\n\r\n  const inputChangeHandler = (e) => {\r\n    setSearchParam({ ...searchParam, incident_name: e.target.value });\r\n  };\r\n\r\n  return (\r\n    <section>\r\n      <form action=\"\">\r\n        <input\r\n          type=\"text\"\r\n          onChange={inputChangeHandler}\r\n          value={searchParam.incident_name}\r\n        />\r\n        <select onChange={selectionChangeHandler} value={searchParam.user_id}>\r\n          <option value=\"\">User</option>\r\n          {users.map((user) => {\r\n            return (\r\n              <option value={user.user_id} key={user.user_id}>\r\n                {user.first_name + \" \" + user.last_name}\r\n              </option>\r\n            );\r\n          })}\r\n        </select>\r\n      </form>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default SearchSection;\r\n","import React from 'react';\r\nimport ResultList from '../components/resultList/ResultList';\r\nimport SearchSection from '../components/SearchSection/SearchSection';\r\nimport './DashBoard.scss'\r\n\r\nconst DashBoard = ({ users, searchParam, setSearchParam, incidents }) => {\r\n\r\n\r\n    return (\r\n        <div className=\"dashboard\">\r\n            <SearchSection users={users} setSearchParam={setSearchParam} searchParam={searchParam}/>\r\n            <ResultList incidents={incidents} users={users}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DashBoard;","export const isFalsy = (value) => (value === 0 ? false : !value);\r\n\r\n//step 1\r\n//{_id:\"\", incident_name: \"adfadf\"} => {incident_name: \"adfadf\"}\r\nexport const cleanEmptyParam = (param) => {\r\n  const copiedParam = { ...param };\r\n  Object.keys(copiedParam).forEach((key) => {\r\n    if (isFalsy(copiedParam[key])) {\r\n      delete copiedParam[key];\r\n    }\r\n  });\r\n  return copiedParam;\r\n};\r\n\r\n//step 2\r\n//{_id:\"123\", incident_name: \"adfadf\"}\r\nexport const paramAttributeNameChange = (param, currentName, newName) => {\r\n  const copiedParam = { ...param };\r\n  const valueOfnewName = copiedParam[currentName];\r\n\r\n  if (isFalsy(valueOfnewName)) {\r\n    console.log(\"check whether the old name is typed correctly OR the value is null\");\r\n  } else {\r\n    copiedParam[newName] = valueOfnewName;\r\n    delete copiedParam[currentName];\r\n  }\r\n\r\n  return copiedParam;\r\n};\r\n","import { useEffect, useState } from \"react/cjs/react.development\";\nimport \"./App.scss\";\nimport DashBoard from \"./pages/DashBoard\";\nimport * as qs from \"qs\";\nimport { cleanEmptyParam, paramAttributeNameChange } from \"./utils/FormatParam\";\nimport pipe from \"lodash/fp/pipe\";\n\nconst api = \"http://localhost:5599\";\n\nfunction App() {\n  //////////从数据库拿user信息，\n  const [users, setUsers] = useState([]);\n  /////////这个state是用于存searchSection中 下拉菜单选择了的 user的id 以及 text input 里面录入的incident的名字\n  const [searchParam, setSearchParam] = useState({\n    user_id: \"\",\n    incident_name: \"\",\n  });\n  //////////////从数据库拿incident 信息\n  const [incidents, setIncidents] = useState([]);\n\n  useEffect(() => {\n    fetch(`${api}/users`).then(async (response) => {\n      if (response.ok) {\n        setUsers(await response.json());\n      }\n    });\n  }, []);\n\n  ////////////////////////////////////////////////////////////////\n\n  const formatParam = (param) => {\n    const copiedParam = { ...param };\n\n    ///三步走，删除空的param, 要是param都是空的，那拿来的数据就是全部incidents， 相当于/incidents\n    /// 这里的逻辑是， 如果param的这个object里，任何值是空，“ ” （default值就是“ ”）， 那么删除key和value的pair\n\n    ///这个逻辑中，还得考虑，如果值是0的特殊情况。 一般来说，如果值为0，那也不是 空值，这个得单独拿出来设定\n\n    const isFalsy = (value) => (value === 0 ? false : !value); //如果不懂 见下文\n\n    ///简单的逻辑，user_id ， incident_name 如果为空， 整个key value pair 都给删了\n    // const deleteEmptyParam = (copiedParam) => {\n\n    //   if (isFalsy(copiedParam.user_id)) {\n    //     delete copiedParam[\"user_id\"];\n    //   }\n\n    //   if (isFalsy(copiedParam.incident_name)) {\n    //     delete copiedParam[\"incident_name\"]\n    //   }\n\n    //   return copiedParam;\n    // }\n\n    //把上面的写好看点\n\n    const deleteEmptyParam = (copiedParam) => {\n      Object.keys(copiedParam).map((key) => {\n        if (isFalsy(copiedParam[key])) {\n          delete copiedParam[key];\n        }\n        ///how to deal with this problem???? 这个map 需要return一个array，是不是用for each 比较好\n      });\n      return copiedParam;\n    };\n\n    ///将param里面的incident_name 改为 name， 因为数据库里面就是用的name\n\n    const changeIncidentNameToName = (noEmptyParam) => {\n      // let changedNameParam;\n      // Object.keys(noEmptyParam).map((key) => {\n      //   if (key === \"incident_name\") {\n      //      changedNameParam = {...noEmptyParam, name: noEmptyParam[key]}//在复制一份？\n      //     delete changedNameParam[key];\n      //   }\n      // })\n\n      // console.log(changedNameParam);\n      // return changedNameParam;\n\n      const value = noEmptyParam.incident_name;\n      delete noEmptyParam[\"incident_name\"];\n\n      return { ...noEmptyParam, name: value };\n    };\n\n    //把object的结构改成 ///qs.stringfy -> searchParam {user_id: \"123123123\", incident_name: \"projectOne\"}  ===> user_id=0492421760&incident_name=incident20\n    //这样api 才起作用\n    const stringfiedParam = qs.stringify(\n      changeIncidentNameToName(deleteEmptyParam(copiedParam))\n    );\n\n    return stringfiedParam;\n  };\n\n  //一般来说 “” 是false， 但是 0 也是false， 我们不想0是false，想他是true， 那么我们可以这么来\n  // const isTrue = (value) => {\n\n  //   if (value === 0) {\n  //     return true;\n  //   } else {\n  //     return value;\n  //   }\n  // }\n\n  // const isTrue = (value) => (value === 0? true:value);\n  //这个很好理解，但是 一般我们用 isFalsy来做\n\n  //  const isFalsy = (value) => {\n  //    if (value === 0) {\n  //      return false; //是falsy吗？？？ 不是的 -》 那就是true了\n  //    } else {\n  //      return !value; //这里的情况有， 不为空， 那！value 就是false =》 是falsy吗？ 不是的 =》 那就是true了|||||| 为空， 那！value 就是true了 =》 是falsy吗？ 是的， 那就是false了\n  //    }\n  //  }\n\n  //  const isFalsy = (value) => (value === 0? false: !value);\n\n  //   const check = (value) => {\n\n  //     if (isFalsy(value)) {\n  //       console.log('false');\n  //     } else {\n  //       console.log('true');\n  //     }\n  //   }\n\n  //  check(\"\");\n\n\n\n  const pipedFormatParam = pipe(\n    cleanEmptyParam,\n    paramAttributeNameChange,\n    qs.stringify\n  )\n\n\nconst getCurrentP = (callback) => {\n   \n  setTimeout(() => {\n    callback('currentPosition')\n  }, 2000)\n}\n\ngetCurrentP((position) => {\n  console.log(position);\n})\n\n\n\n\n\n  ////incident 每次根据 searchParam的更改而更改\n  useEffect(() => {\n    fetch(`${api}/incidents?${formatParam(searchParam)}`).then(\n      async (response) => {\n        if (response.ok) {\n          setIncidents(await response.json());\n        }\n      }\n    );\n  }, [searchParam]);\n\n  return (\n    <>\n      <DashBoard\n        users={users}\n        setSearchParam={setSearchParam}\n        searchParam={searchParam}\n        incidents={incidents}\n      />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}